apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
version = '1.3.8'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}
dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["support-v4"]
    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["annotations"]
    api rootProject.ext.dependencies["recyclerview-v7"]

    api rootProject.ext.dependencies["xrecyclerview"]

    api rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    kapt rootProject.ext.dependencies["glide-compiler"]

    api rootProject.ext.dependencies["gson"]
    api rootProject.ext.dependencies["rxandroid"]
    api rootProject.ext.dependencies["rxjava"]
    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["retrofit-converter-gson"]
    api rootProject.ext.dependencies["retrofit-adapter-rxjava"]
    api rootProject.ext.dependencies["okhttp3"]

    api rootProject.ext.dependencies["rxbus"]

//    api rootProject.ext.dependencies["eventBus"]
//    annotationProcessor rootProject.ext.dependencies["eventbus-annotation-processor"]
//    kapt rootProject.ext.dependencies["eventbus-annotation-processor"]

    api rootProject.ext.dependencies["rxlifecycle"]
    api rootProject.ext.dependencies["rxlifecycle-android"]
    api rootProject.ext.dependencies["rxlifecycle-components"]
    api rootProject.ext.dependencies["rxpermissions"]

    api rootProject.ext.dependencies["kotlin"]

    api rootProject.ext.dependencies["nativelogger"]

    api rootProject.ext.dependencies["viewpager2"]
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 生成sourceJar和javaDocJar构件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
group = rootProject.groupId

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'jar'
                name 'XDroidMvp'
                url rootProject.website
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'xdroid-mvp'
                        name rootProject.groupId
                        email rootProject.email
                    }
                }
                scm {
                    connection rootProject.gitUrl
                    developerConnection rootProject.gitUrl
                    url rootProject.siteUrl
                }
            }
        }
    }
}

Properties properties = new Properties()
boolean isHasFile = false
if (project.rootProject.file('local.properties') != null){
    isHasFile = true
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}
bintray {
    user = isHasFile ? properties.getProperty("bintray.user") : System.getenv("bintray.user")
    key = isHasFile ? properties.getProperty("bintray.apikey") : System.getenv("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = rootProject.repoName
        name = "XDroidMvp"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}